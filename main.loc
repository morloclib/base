module base (*)

-- really need `import *`
-- also need namespaces and qualified imports
import conventions
 ( add
 , at
 , break
 , concat
 , concatMap
 , contextFilterKey
 , contextFilterVal
 , curry
 , div
 , drop
 , dropWhile
 , elem
 , enumerateWith
 , eq
 , filterKey
 , filterVal
 , flip
 , fold
 , fst
 , get
 , gt
 , head
 , id
 , ifelse
 , init
 , join
 , keys
 , last
 , length
 , lengthS
 , lines
 , lookup
 , map
 , mapKey
 , mapVal
 , mod
 , mul
 , onFst
 , onSnd
 , readMap
 , replicate
 , reverse
 , scanl
 , scanl1
 , scanr
 , scanr1
 , shard
 , sleep
 , snd
 , span
 , splitAt
 , sub
 , tail
 , take
 , takeWhile
 , tuple
 , uncurry
 , unique
 , unlines
 , until
 , unwords
 , unzip
 , vals
 , withFsts
 , withSnds
 , words
 , zip
 , zipWith
 )

import cppbase
 ( Bool
 , Int
 , Map
 , Real
 , Str
 , add
 , at
 , div
 , enumerateWith
 , eq
 , filter
 , filterKey
 , filterVal
 , fold
 , gt
 , head
 , id
 , ifelse
 , keys
 , length
 , lengthS
 , map
 , mapKey
 , mapVal
 , mod
 , mul
 , sub
 , unique
 , unzip
 , vals
 , zip
 , zipWith
 )

import rbase
 ( Map
 , Real
 , Int
 , Str
 , Bool
 , id
 , at
 , enumerateWith
 , fold
 , map
 , zipWith
 , add
 , sub
 , mul
 , div
 , length
 , lengthS
 )

import pybase
 ( Bool
 , Int
 , Map
 , Real
 , Str
 , add
 , at
 , concat
 , div
 , enumerateWith
 , fold
 , id
 , join
 , map
 , mul
 , onFst
 , shard
 , sleep
 , sub
 , zipWith
 , length
 , lengthS
 )


withFsts f xs = zip (f (map fst xs)) (map snd xs)
withSnds f xs = zip (map fst xs) (f (map snd xs))
