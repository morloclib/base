module base (*)

-- really need `import *`
-- also need namespaces and qualified imports
import conventions

import cppbase
 ( run
 , add
 , append
 , at
 , div
 , enumerateWith
 , eq
 , filter
 , filterKey
 , filterVal
 , fold
 , fst
 , snd
 , fst3
 , snd3
 , thr3
 , head -- [a] -> a
 , tail -- [a]_{n} -> [a]_{n-1}
 , last -- [a] -> a
 , take -- i:Int -> [a]_{n>i} -> [a]_{n=i}
 , drop -- i:Int -> [a]_{n>i} -> [a]_{n-i}
 , init -- i:Int -> [a]_{n>i} -> [a]_{n-i}
 , id
 , ifelse
 , branch
 , keys
 , size 
 , map
 , mapKey
 , mapVal
 , join
 , mod
 , mul
 , sub
 , unique
 , unzip
 , vals
 , zip
 , zipWith
 , seq
 , const
 -- logical
 , not
 , and
 , or
 -- string
 , show
 , unlines
 , words
 , unwords
 , paste
 , lines
 -- Show
 , show
 -- Sized
 , size
 -- Ord
 , le
 , lt
 , ge
 , gt
 -- Eq
 , eq
 , ne
 -- Addable
 , add
 , mul
 , mod
 , div
 -- Subtractable
 , neg
 , sub
 )


import rbase
 ( run
 , id
 , at
 , enumerateWith
 , fold
 , map
 , zipWith
 , join
 , head -- [a] -> a
 , tail -- [a]_{n} -> [a]_{n-1}
 , last -- [a] -> a
 , take -- i:Int -> [a]_{n>i} -> [a]_{n=i}
 , drop -- i:Int -> [a]_{n>i} -> [a]_{n-i}
 , init -- i:Int -> [a]_{n>i} -> [a]_{n-i}
 , fst
 , snd
 , fst3
 , snd3
 , thr3
 , elem
 -- combinators
 , seq
 , const
 -- logical
 , not
 , and
 , or
 -- Show
 , show
 -- Sized
 , size
 -- Ord
 , le
 , lt
 , ge
 , gt
 -- Eq
 , eq
 , ne
 -- Addable
 , add
 , mul
 , mod
 , div
 -- Subtractable
 , neg
 , sub
 )


import pybase
 ( run
 , append
 , at
 , ifelse
 , concat
 , enumerateWith
 , fold
 , id
 , join
 , map
 , onFst
 , shard
 , head -- [a] -> a
 , tail -- [a]_{n} -> [a]_{n-1}
 , last -- [a] -> a
 , take -- i:Int -> [a]_{n>i} -> [a]_{n=i}
 , drop -- i:Int -> [a]_{n>i} -> [a]_{n-i}
 , init -- i:Int -> [a]_{n>i} -> [a]_{n-i}
 , sleep
 , keys
 , vals
 , filterKey
 , filterVal
 , zipWith
 , readMap
 , fst
 , snd
 , fst3
 , snd3
 , thr3
 , elem
 -- combinators
 , seq
 , const
 -- logical
 , not
 , and
 , or
 -- Show
 , show
 -- Sized
 , size
 -- Ord
 , le
 , lt
 , ge
 , gt
 -- Eq
 , eq
 , ne
 -- Addable
 , add
 , mul
 , mod
 , div
 -- Subtractable
 , neg
 , sub
 )

withFsts f xs = zip (f (map fst xs)) (map snd xs)
withSnds f xs = zip (map fst xs) (f (map snd xs))
